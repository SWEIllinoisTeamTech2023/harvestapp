# -*- coding: utf-8 -*-
# """September_ML_Model.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1tcGHfscrG2cVP7Hdp7v0n4mU2wBenJ3b
# """

#Importing the libraries
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# from sklearn import *
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

from scipy.optimize import minimize, Bounds

# Define constants

# crop price per bushel (in dollars)
GRAIN_PRICE_PER_BU =  5 # Grain price per bushel (in dollars)

# fuel/labor/consumable cost
fuel_per_hour = 18  # Fuel consumption per hour (in gallons)
dollars_per_gallon = 3.797  # Price of fuel per gallon (in dollars)
fuel_cost = fuel_per_hour * dollars_per_gallon  # Fuel cost per hour (in dollars)
consumable = 1  # Consumable cost per hour (in dollars)
labor = 20  # Labor cost per hour (in dollars)

#header width
HEADER_WIDTH_M = 12  # Header width (in meters)

#conversions
BU_IN_KG = 25.4  # Conversion factor from bushels to kilograms
M2_TO_ACRES = 0.000247105  # Conversion factor from square meters to acres


# """loss_bu_per_hr:
#     This represents the loss in bushels per hour.
#     Total grain loss is measured in kilograms.
#     To convert this loss to bushels, we divide by the conversion factor BU_IN_KG which is 25.4 kg/bu.
#     As the grain loss is calculated per minute, we multiply it by 60 to get the loss per hour.

# loss_cost_per_hr:
#     This represents the monetary loss due to grain loss per hour.
#     We take the loss in bushels per hour and multiply it by the grain price per bushel to get the loss in dollars per hour.

# productivity_acres_hr:
#     This represents the productivity in acres per hour.
#     GPS speed is measured in km/hr.
#     o convert km/hr to m/min, we multiply by 1000.
#     We then multiply this speed by the header width in meters to get the area covered in square meters per minute.
#     We convert this area to acres using the conversion factor M2_TO_ACRES which is 0.000247105 acres/mÂ².

# cost_of_harvest_new:
#     This represents the cost of harvesting per acre.
#     We calculate the total cost per hour by adding the fuel cost, loss cost, consumable cost, and labor cost.
#     We then divide this total cost by the productivity in acres per hour to get the cost of harvesting per acre.
    
# """



# """# OPTIMIZING COST"""
def readDataset():
    # Load the data
    dataset = pd.read_csv("Wheat_cleaned_data.csv")
    # D35_data = D35_data.drop(columns=["machinename", "field", "ic3_leftsidesepabsgrainloss", "ic3_rightsidesepabsgrainloss",
    #                         "ic3_leftsidecleanshoeabsgrainloss", "ic3_rightsidecleanshoeabsgrainloss", "ic3_ic2steadystate",
    #                         "grain_quality_percent_unthreshed", "grain_quality_percent_damaged", "grain_quality_percent_light_mog",
    #                         "grain_quality_percent_heavy_mog", "harvest_smart_header_width_in_use", "latitude", "longitude"])
    dataset = dataset.dropna()


    dataset = dataset[dataset["Machine_HarvestingState"] != 0]
    dataset = dataset[dataset["Machine_VehicleSpeed"] != 0]
    dataset["total_loss_percent"] = dataset["GrainLoss_Sep_Total_Percent"] + dataset["GrainLoss_Shoe_Total_Percent"]
    dataset["total_grain_loss"] = dataset["Machine_MassFlow_Rate"] * (dataset["total_loss_percent"]/100)


    # D35_data_filtered['header_width'] = HEADER_WIDTH_M
    dataset['crop_type'] = 'wheat'
    # Calculate loss in bu/hr
    dataset['loss_bu_per_hr'] = dataset['total_grain_loss'] * 60 / BU_IN_KG

    # Calculate loss cost per hour
    dataset['loss_cost_per_hr'] = dataset['loss_bu_per_hr'] * GRAIN_PRICE_PER_BU

    # Calculate productivity in acres/hr
    dataset['productivity_acres_hr'] = dataset['Machine_VehicleSpeed'] * 1000 * dataset["Header_Width"] * M2_TO_ACRES

    # Calculate cost of harvest
    dataset['cost_of_harvest_new'] = (fuel_cost + dataset['loss_cost_per_hr'] + consumable + labor) / dataset['productivity_acres_hr']

    # Display descriptive statistics for new 'cost_of_harvest'
    dataset['cost_of_harvest_new'].describe()
    # dataset[['Machine_MassFlow_Rate','cost_of_harvest_new']]
    return dataset


# """### CALCULATING LOSS BASED ON MASS FLOW"""

def calculateTotalSepLoss(Machine_ThreshingSpeed,Machine_ThreshingClearance,Machine_FanSpeed,Machine_ChafferPostion,Machine_SievePostion,SFC_RotorDrivePressure,Machine_MassFlow_Rate):
    coefficients = [-8.667770321350396, 0, 0.021690203994670365, 0.21523783282775447,
               0.013626585828221925, -0.15086141616407228, -0.28170497985141335,
               -0.014251296681123406, 0, 0, 0, 0, 0, -3.2995736673691594e-06,
               -0.00012076980270716287, -1.0734381292552374e-05, 6.364416214645302e-05,
               0.000408265909258478, 2.523355757260205e-06, -7.2611381312802554e-06,
               0.0002465651651462422, -0.005073405210066771, -4.994233648581839e-05,
               2.3593426956071662e-05, -0.00012051882753612726, 9.656864800142056e-07,
               0.001363475856307496, 6.482281191702032e-05, 0.0001359107188510157, 0,
               -8.521769342295916e-06, 0.0002631767732570474, -1.9162746267866296e-06,
               -0.001089118878535314, 8.916688466944068e-05, 4.191248121294226e-06]
    Intercept = coefficients[0]
    Predicted_GrainLoss_Sep_Total_Percent = Intercept
    Predicted_GrainLoss_Sep_Total_Percent += Machine_ThreshingSpeed * coefficients[2]
    Predicted_GrainLoss_Sep_Total_Percent += Machine_ThreshingClearance * coefficients[3]
    Predicted_GrainLoss_Sep_Total_Percent += Machine_FanSpeed * coefficients[4]
    Predicted_GrainLoss_Sep_Total_Percent += Machine_ChafferPostion * coefficients[5]
    Predicted_GrainLoss_Sep_Total_Percent += Machine_SievePostion * coefficients[6]
    Predicted_GrainLoss_Sep_Total_Percent += SFC_RotorDrivePressure * coefficients[7]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_MassFlow_Rate * SFC_RotorDrivePressure) * coefficients[13]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingSpeed * Machine_ThreshingClearance) * coefficients[14]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingSpeed * Machine_FanSpeed) * coefficients[15]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingSpeed * Machine_ChafferPostion) * coefficients[16]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingSpeed * Machine_SievePostion) * coefficients[17]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingSpeed * SFC_RotorDrivePressure) * coefficients[18]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingClearance * Machine_FanSpeed) * coefficients[19]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingClearance * Machine_ChafferPostion) * coefficients[20]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingClearance * Machine_SievePostion) * coefficients[21]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingClearance * SFC_RotorDrivePressure) * coefficients[22]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_FanSpeed * Machine_ChafferPostion) * coefficients[23]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_FanSpeed * Machine_SievePostion) * coefficients[24]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_FanSpeed * SFC_RotorDrivePressure) * coefficients[25]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ChafferPostion * Machine_SievePostion) * coefficients[26]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ChafferPostion * SFC_RotorDrivePressure) * coefficients[27]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_SievePostion * SFC_RotorDrivePressure) * coefficients[28]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingSpeed ** 2) * coefficients[30]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ThreshingClearance ** 2) * coefficients[31]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_FanSpeed ** 2) * coefficients[32]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_ChafferPostion ** 2) * coefficients[33]
    Predicted_GrainLoss_Sep_Total_Percent += (Machine_SievePostion ** 2) * coefficients[34]
    Predicted_GrainLoss_Sep_Total_Percent += (SFC_RotorDrivePressure ** 2) * coefficients[35]
    return Predicted_GrainLoss_Sep_Total_Percent

def calculateTotalShoeLoss(Machine_ThreshingSpeed,Machine_ThreshingClearance,Machine_FanSpeed,Machine_ChafferPostion,Machine_SievePostion,SFC_RotorDrivePressure,Machine_MassFlow_Rate):
    
  # shoe_coeff = 6.8998210481734866e-09
  # GrainLoss_Shoe_Total_Percent=shoe_coeff * (14.37750468758842 + Machine_ThreshingSpeed + Machine_ThreshingClearance + Machine_FanSpeed + Machine_ChafferPostion + Machine_SievePostion + SFC_RotorDrivePressure + Machine_MassFlow_Rate*SFC_RotorDrivePressure + Machine_ThreshingSpeed*Machine_ThreshingClearance + Machine_ThreshingSpeed*Machine_FanSpeed + Machine_ThreshingSpeed*Machine_ChafferPostion + Machine_ThreshingSpeed*Machine_SievePostion + Machine_ThreshingSpeed*SFC_RotorDrivePressure + Machine_ThreshingClearance*Machine_FanSpeed + Machine_ThreshingClearance*Machine_ChafferPostion + Machine_ThreshingClearance*Machine_SievePostion + Machine_ThreshingClearance*SFC_RotorDrivePressure + Machine_FanSpeed*Machine_ChafferPostion + Machine_FanSpeed*Machine_SievePostion + Machine_FanSpeed*SFC_RotorDrivePressure + Machine_ChafferPostion*Machine_SievePostion + Machine_ChafferPostion*SFC_RotorDrivePressure + Machine_SievePostion*SFC_RotorDrivePressure + (Machine_ThreshingSpeed ** 2.0) + (Machine_ThreshingClearance ** 2.0) + (Machine_FanSpeed ** 2.0) + (Machine_ChafferPostion ** 2.0) + (Machine_SievePostion ** 2.0) + (SFC_RotorDrivePressure ** 2.0))
  # return GrainLoss_Shoe_Total_Percent
  # Coefficients
    coefficients = [14.37750468758842, 0, -0.02482076228724297, -0.13761109175145403,
               0.007245541327819897, -0.4208517501543941, 0.2606264516251841,
               -0.00403109026763175, 0, 0, 0, 0, 0, 2.459208265995876e-06,
               0.00022703329667070457, -2.5943258168986845e-06, 0.0002649022960440354,
               0.00016624813188121648, 1.1529575475662306e-06, -0.00010596589948216488,
               0.0013088588510150032, -0.000471791977332864, -2.7368800791721182e-05,
               -0.00010834047094188791, -0.0002131233543017546, 2.039659270715638e-06,
               0.004571212308398334, 1.5676262643511788e-05, -0.00020657089170676566, 0,
               7.101077624938284e-06, 0.0010018789896286576, -1.8924148348636933e-08,
               0.005464744004973386, 0.00030795639011318835, 1.3064885293019383e-06]

    # Calculate the predicted value
    Intercept = coefficients[0]
    Predicted_GrainLoss_Shoe_Total_Percent = Intercept
    Predicted_GrainLoss_Shoe_Total_Percent += Machine_ThreshingSpeed * coefficients[2]
    Predicted_GrainLoss_Shoe_Total_Percent += Machine_ThreshingClearance * coefficients[3]
    Predicted_GrainLoss_Shoe_Total_Percent += Machine_FanSpeed * coefficients[4]
    Predicted_GrainLoss_Shoe_Total_Percent += Machine_ChafferPostion * coefficients[5]
    Predicted_GrainLoss_Shoe_Total_Percent += Machine_SievePostion * coefficients[6]
    Predicted_GrainLoss_Shoe_Total_Percent += SFC_RotorDrivePressure * coefficients[7]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_MassFlow_Rate * SFC_RotorDrivePressure) * coefficients[13]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingSpeed * Machine_ThreshingClearance) * coefficients[14]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingSpeed * Machine_FanSpeed) * coefficients[15]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingSpeed * Machine_ChafferPostion) * coefficients[16]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingSpeed * Machine_SievePostion) * coefficients[17]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingSpeed * SFC_RotorDrivePressure) * coefficients[18]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingClearance * Machine_FanSpeed) * coefficients[19]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingClearance * Machine_ChafferPostion) * coefficients[20]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingClearance * Machine_SievePostion) * coefficients[21]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingClearance * SFC_RotorDrivePressure) * coefficients[22]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_FanSpeed * Machine_ChafferPostion) * coefficients[23]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_FanSpeed * Machine_SievePostion) * coefficients[24]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_FanSpeed * SFC_RotorDrivePressure) * coefficients[25]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ChafferPostion * Machine_SievePostion) * coefficients[26]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ChafferPostion * SFC_RotorDrivePressure) * coefficients[27]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_SievePostion * SFC_RotorDrivePressure) * coefficients[28]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingSpeed ** 2) * coefficients[30]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ThreshingClearance ** 2) * coefficients[31]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_FanSpeed ** 2) * coefficients[32]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_ChafferPostion ** 2) * coefficients[33]
    Predicted_GrainLoss_Shoe_Total_Percent += (Machine_SievePostion ** 2) * coefficients[34]
    Predicted_GrainLoss_Shoe_Total_Percent += (SFC_RotorDrivePressure ** 2) * coefficients[35]

    # Print the predicted value
    # print("Predicted GrainLoss_Shoe_Total_Percent:", Predicted_GrainLoss_Shoe_Total_Percent)
    return Predicted_GrainLoss_Shoe_Total_Percent

# print("sep: ", calculateTotalSepLoss(Machine_ThreshingSpeed,Machine_ThreshingClearance,Machine_FanSpeed,Machine_ChafferPostion,Machine_SievePostion,SFC_RotorDrivePressure,Machine_MassFlow_Rate))
# print("shoe: ", calculateTotalShoeLoss(Machine_ThreshingSpeed,Machine_ThreshingClearance,Machine_FanSpeed,Machine_ChafferPostion,Machine_SievePostion,SFC_RotorDrivePressure,Machine_MassFlow_Rate))



def train(params):
    data = readDataset()
    header_width = 9.13 # [USER INPUT]
    crop_type = 'wheat' #[USER INPUT]

    # CALCULATING COST OF HARVEST
    def calculate_cost(mass_flow):
        # Access the required parameters from the dataset --- NOT SURE ABOUT THIS
        # print("predict: ",
        mass_flow = model_mass_flow.predict(np.array((mass_flow)).reshape(1, -1))
        print("mass_flow: ", mass_flow)
        if (mass_flow < 0):
            return [1e6,0 ,0,0,0,0]

        # print(mass_flow)
        #
        parameters = data.head(1)
        # tradecostperhour = 100 # CONSTANT -- TODO: REPLACE WITH ACTUAL VALUE
        # fuelperhour = fuel_per_hour # CONSTANT
        fuel_cost = 18 * 3.797  # CONSTANT
        if len(params)==0:
            Machine_ThreshingSpeed = parameters["Machine_ThreshingSpeed"]
            Machine_ThreshingClearance = parameters["Machine_ThreshingClearance"]
            Machine_FanSpeed = parameters["Machine_FanSpeed"]
            Machine_ChafferPostion =parameters["Machine_ChafferPostion"]
            Machine_SievePostion = parameters["Machine_SievePostion"]
            SFC_RotorDrivePressure = parameters["SFC_RotorDrivePressure"]
          
        else:
            Machine_ThreshingSpeed = float(params["speed"])
            Machine_ThreshingClearance =float (params["concaveClear"])
            Machine_FanSpeed = float(params["fanSpeed"])
            Machine_ChafferPostion =float(params["chafferClear"])
            Machine_SievePostion = float(params["sieveClear"])
            SFC_RotorDrivePressure = float(params["rotorSpeed"])
            print("getting input from params")
        
        Machine_MassFlow_Rate = mass_flow 

        seploss = calculateTotalSepLoss(Machine_ThreshingSpeed,Machine_ThreshingClearance,Machine_FanSpeed,Machine_ChafferPostion,Machine_SievePostion,SFC_RotorDrivePressure,Machine_MassFlow_Rate)
        shoeloss = calculateTotalShoeLoss(Machine_ThreshingSpeed,Machine_ThreshingClearance,Machine_FanSpeed,Machine_ChafferPostion,Machine_SievePostion,SFC_RotorDrivePressure,Machine_MassFlow_Rate)

        total_loss_percent =abs( seploss+shoeloss)[0] 
        print(total_loss_percent)
        # total_loss_percent = 0.01 
        sec_per_hour= 3600
        wheat_lb_per_bu = 60
        kg_to_lbs = 2.20462
        # loss_cost_per_hr = total_loss_percent * mass_flow * sec_per_hour * kg_to_lbs * (1/wheat_lb_per_bu) * GRAIN_PRICE_PER_BU  # $/hr
        # total_grain_loss = mass_flow * 3600 * total_loss_percent  #(kg/h)
        # loss_bu_per_hr = (total_grain_loss ) / ( BU_IN_KG)
        #NEW STUFF
        # bu_per_hour = mass_flow * sec_per_hour / BU_IN_KG # bu/h
        # loss_bu_per_hr = bu_per_hour * total_loss_percent # bu/hr loss
        # # loss_bu_per_hr = (total_grain_loss ) / ( BU_IN_KG)
        total_grain_loss = mass_flow * total_loss_percent  #(kg/h)
        loss_bu_per_hr = (total_grain_loss *3600) / (  BU_IN_KG)


        # Calculate loss cost per hour
        loss_cost_per_hr = loss_bu_per_hr * GRAIN_PRICE_PER_BU
        # # # Calculate loss cost per hour
        # loss_cost_per_hr = loss_bu_per_hr * GRAIN_PRICE_PER_BU

        # Calculate productivity in acres/hr
        productivity_acres_hr = parameters['Machine_VehicleSpeed'] *1000 * header_width * M2_TO_ACRES
        # m2_per_acre = 4046.86
        # productivity_acres_hr = (data['Machine_VehicleSpeed'] *1000 * header_width)/m2_per_acre

        # grainprice = GRAIN_PRICE_PER_BU # CONSTANT
        # consumablecostperhour = consumable # CONSTANT
        # laborcostperhour = labor # CONSTANT
        # gps_speed = parameters["Machine_VehicleSpeed"]
        # trade_cost= 1043978 * (1-0.69)
        trade_cost = 19.75
        estimated_annual_hours = 300 # user input

        bu_per_hr = mass_flow * 3600 / BU_IN_KG
        # fuel_consumption_per_bu = 0.0196  #(gal/bu)
        # fuel_cost = fuel_consumption_per_bu * bu_per_hr * dollars_per_gallon
        print("fuel_cost: ", fuel_cost)
        # print(trade_cost / estimated_annual_hours)
        # Calculate cost of harvest
        cost_per_hour = (fuel_cost + loss_cost_per_hr + labor 
    ) /productivity_acres_hr + consumable + trade_cost
        # print("cost: ", cost_per_hour[0], " loss: ", total_loss_percent)
        print("loss cost per hour: ",loss_cost_per_hr )
        # print("total loss: ",total_grain_loss )

        return cost_per_hour[0], total_loss_percent, round((loss_cost_per_hr/productivity_acres_hr[0])[0],2), round(labor/productivity_acres_hr[0],2), round(fuel_cost/productivity_acres_hr[0],2), trade_cost
    
    def objective_function(params={}):
        mass_flow = params
        if mass_flow < 0:
            # Return a large negative mass flow to penalize negative values
            return 1e6

        # Calculate cost and crop loss
        cost = calculate_cost(mass_flow)[0]

        return cost
    # Initial guess mass flow
    initial_guess = [25.0]

    # Create a linear regression model to predict mass flow
    X = data[['Machine_MassFlow_Rate']]
    y_mass_flow = data['cost_of_harvest_new']

    x_ = PolynomialFeatures(degree=1, include_bias=False).fit_transform(X)
    model_mass_flow = LinearRegression().fit(x_, y_mass_flow)
    r_sq = model_mass_flow.score(x_, y_mass_flow)
    intercept, coefficients = model_mass_flow.intercept_, model_mass_flow.coef_
    print("r_sq: ", r_sq, " intercept: ", intercept, " coefficients: ", coefficients)

    # Callback function to print cost per hour at each iteration
    def print_iteration_results(xk):
        mass_flow = xk
        cost_per_hour = calculate_cost(mass_flow)[0]
        current_mass_flow = model_mass_flow.predict([mass_flow])
        # current_mass_flow = np.exp(model_mass_flow.predict(np.log([mass_flow])))
        print(f"Iteration - Header Width: {header_width}, Crop Type: {crop_type}, Cost Per Hour: {cost_per_hour}, Massflow: {current_mass_flow}")
    mass_flow_bounds = Bounds(10,69)
    # Perform optimization to minimize cost per hour with callback
    result = minimize(objective_function, initial_guess, method='Nelder-Mead', callback=print_iteration_results, options={'disp': True},bounds=mass_flow_bounds)
    # print(result)
    optimized_mass_flow = result.x
    minimized_cost_per_hour = result.fun

    # Print the optimized values and minimized cost per hour
    print(f"Optimized Mass flow: {optimized_mass_flow}")
    print(f"Optimized Cost Per Hour: {minimized_cost_per_hour}")
    print(f"Optimized Crop Loss: {calculate_cost(optimized_mass_flow)[1]}")


    mass_flow_values = np.linspace(10,69)  # Adjust the range as needed
    line_data = []
    for mf in mass_flow_values:
        line_data.append({ "feedrate": mf, "totalCost": calculate_cost(mf)[0], "machineCost": 30, "harvestLoss": calculate_cost(mf)[2] })

    # Calculate the corresponding costs for each mass flow value
    def plotGraph():
        print("ploting values")
        cost_values = [((calculate_cost(mf)[0])) for mf in mass_flow_values]
        loss_values = [calculate_cost(mf)[1] for mf in mass_flow_values]
        total_loss_values = [((calculate_cost(mf)[2])) for mf in mass_flow_values]

        # /3600)/mf)/0.00110231
        # Plot the simulation chart
        fig, ax = plt.subplots()
        ax.plot(mass_flow_values, cost_values, label='Cost per hour', color="red")
        ax.set_xlabel('Mass Flow')
        ax.set_ylabel("Cost per hour")

        # ax3 = ax.twinx()
        # ax3.plot(mass_flow_values, total_loss_values, label='Cost of loss', color="green")
        # ax3.set_ylabel("Cost of loss")

        ax2 = ax.twinx()
        ax2.plot(mass_flow_values, loss_values, label="Crop loss (%)")
        ax2.set_ylabel("Crop Loss(%)")

        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        # lines3, labels3 = ax2.get_legend_handles_labels()
        lines = lines1  + lines2
        labels = labels1  + labels2

        # Place the legend at the desired location
        ax.legend(lines, labels, loc="upper left")
        plt.show()
    # plotGraph()
    total_cost, total_loss_percent, grain_loss, labor_cost, fuel_cost, depreciation_cost = calculate_cost(optimized_mass_flow)
    print({"grain_loss": grain_loss, "labor_cost":labor_cost, "fuel_cost": fuel_cost, "depreciation_cost": depreciation_cost, "total_costofharvest": total_cost})
    return {"grain_loss": grain_loss, "labor_cost":labor_cost, "fuel_cost": fuel_cost, "depreciation_cost": depreciation_cost, "total_costofharvest": total_cost}
    # return json.dumps({"pie":{"grain_loss": grain_loss[0], "labor_cost":labor_cost, "fuel_cost": fuel_cost, "depreciation_cost": depreciation_cost, "total_costofharvest": total_cost}, "line": json.dumps(line_data)})
train({})


